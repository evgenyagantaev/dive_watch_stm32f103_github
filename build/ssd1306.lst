ARM GAS  /tmp/ccR5olrN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ssd1306.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ssd1306_WriteCommand,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	ssd1306_WriteCommand:
  24              	.LFB63:
  25              		.file 1 "Src/ssd1306.c"
   1:Src/ssd1306.c **** 
   2:Src/ssd1306.c **** #include"ssd1306.h"
   3:Src/ssd1306.c **** 
   4:Src/ssd1306.c **** 
   5:Src/ssd1306.c **** // Screenbuffer
   6:Src/ssd1306.c **** static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];
   7:Src/ssd1306.c **** 
   8:Src/ssd1306.c **** // Screen object
   9:Src/ssd1306.c **** static SSD1306_t SSD1306;
  10:Src/ssd1306.c **** 
  11:Src/ssd1306.c **** 
  12:Src/ssd1306.c **** //
  13:Src/ssd1306.c **** //  Send a byte to the command register
  14:Src/ssd1306.c **** //
  15:Src/ssd1306.c **** static void ssd1306_WriteCommand(uint8_t command)
  16:Src/ssd1306.c **** {
  26              		.loc 1 16 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 00B5     		push	{lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
  38 0004 06AB     		add	r3, sp, #24
  39 0006 03F8010D 		strb	r0, [r3, #-1]!
  17:Src/ssd1306.c **** 	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
  40              		.loc 1 17 0
  41 000a 0093     		str	r3, [sp]
ARM GAS  /tmp/ccR5olrN.s 			page 2


  42 000c 0123     		movs	r3, #1
  43 000e 0193     		str	r3, [sp, #4]
  44 0010 0A22     		movs	r2, #10
  45 0012 0292     		str	r2, [sp, #8]
  46 0014 0348     		ldr	r0, .L3
  47              	.LVL1:
  48 0016 7821     		movs	r1, #120
  49 0018 0022     		movs	r2, #0
  50 001a FFF7FEFF 		bl	HAL_I2C_Mem_Write
  51              	.LVL2:
  18:Src/ssd1306.c **** }
  52              		.loc 1 18 0
  53 001e 07B0     		add	sp, sp, #28
  54              	.LCFI2:
  55              		.cfi_def_cfa_offset 4
  56              		@ sp needed
  57 0020 5DF804FB 		ldr	pc, [sp], #4
  58              	.LVL3:
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 0024 00000000 		.word	hi2c1
  63              		.cfi_endproc
  64              	.LFE63:
  66              		.section	.text.ssd1306_Fill,"ax",%progbits
  67              		.align	2
  68              		.global	ssd1306_Fill
  69              		.thumb
  70              		.thumb_func
  72              	ssd1306_Fill:
  73              	.LFB65:
  19:Src/ssd1306.c **** 
  20:Src/ssd1306.c **** 
  21:Src/ssd1306.c **** //
  22:Src/ssd1306.c **** //	Initialize the oled screen
  23:Src/ssd1306.c **** //
  24:Src/ssd1306.c **** uint8_t ssd1306_Init(void)
  25:Src/ssd1306.c **** {	
  26:Src/ssd1306.c **** 	// Wait for the screen to boot
  27:Src/ssd1306.c **** 	HAL_Delay(100);
  28:Src/ssd1306.c **** 	
  29:Src/ssd1306.c **** 	/* Init LCD */
  30:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xAE); //display off
  31:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
  32:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Ad
  33:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
  34:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
  35:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x00); //---set low column address
  36:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x10); //---set high column address
  37:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x40); //--set start line address
  38:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x81); //--set contrast control register
  39:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xFF);
  40:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
  41:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA6); //--set normal display
  42:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
  43:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x3F); //
  44:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
ARM GAS  /tmp/ccR5olrN.s 			page 3


  45:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD3); //-set display offset
  46:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x00); //-not offset
  47:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
  48:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xF0); //--set divide ratio
  49:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD9); //--set pre-charge period
  50:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x22); //
  51:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
  52:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x12);
  53:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xDB); //--set vcomh
  54:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
  55:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
  56:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x14); //
  57:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
  58:Src/ssd1306.c **** 	
  59:Src/ssd1306.c **** 	// Clear screen
  60:Src/ssd1306.c **** 	ssd1306_Fill(Black);
  61:Src/ssd1306.c **** 	
  62:Src/ssd1306.c **** 	// Flush buffer to screen
  63:Src/ssd1306.c **** 	ssd1306_UpdateScreen();
  64:Src/ssd1306.c **** 	
  65:Src/ssd1306.c **** 	// Set default values for screen object
  66:Src/ssd1306.c **** 	SSD1306.CurrentX = 0;
  67:Src/ssd1306.c **** 	SSD1306.CurrentY = 0;
  68:Src/ssd1306.c **** 	
  69:Src/ssd1306.c **** 	SSD1306.Initialized = 1;
  70:Src/ssd1306.c **** 	
  71:Src/ssd1306.c **** 	return 1;
  72:Src/ssd1306.c **** }
  73:Src/ssd1306.c **** 
  74:Src/ssd1306.c **** //
  75:Src/ssd1306.c **** //  Fill the whole screen with the given color
  76:Src/ssd1306.c **** //
  77:Src/ssd1306.c **** void ssd1306_Fill(SSD1306_COLOR color) 
  78:Src/ssd1306.c **** {
  74              		.loc 1 78 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.LVL4:
  79:Src/ssd1306.c **** 	/* Set memory */
  80:Src/ssd1306.c **** 	uint32_t i;
  81:Src/ssd1306.c **** 
  82:Src/ssd1306.c **** 	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
  80              		.loc 1 82 0
  81 0000 0023     		movs	r3, #0
  82 0002 06E0     		b	.L6
  83              	.LVL5:
  84              	.L8:
  83:Src/ssd1306.c **** 	{
  84:Src/ssd1306.c **** 		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
  85              		.loc 1 84 0
  86 0004 08B9     		cbnz	r0, .L9
  87 0006 0021     		movs	r1, #0
  88 0008 00E0     		b	.L7
  89              	.L9:
  90 000a FF21     		movs	r1, #255
ARM GAS  /tmp/ccR5olrN.s 			page 4


  91              	.L7:
  92              		.loc 1 84 0 is_stmt 0 discriminator 4
  93 000c 034A     		ldr	r2, .L10
  94 000e D154     		strb	r1, [r2, r3]
  82:Src/ssd1306.c **** 	{
  95              		.loc 1 82 0 is_stmt 1 discriminator 4
  96 0010 0133     		adds	r3, r3, #1
  97              	.LVL6:
  98              	.L6:
  82:Src/ssd1306.c **** 	{
  99              		.loc 1 82 0 is_stmt 0 discriminator 2
 100 0012 B3F5806F 		cmp	r3, #1024
 101 0016 F5D3     		bcc	.L8
  85:Src/ssd1306.c **** 	}
  86:Src/ssd1306.c **** }
 102              		.loc 1 86 0 is_stmt 1
 103 0018 7047     		bx	lr
 104              	.L11:
 105 001a 00BF     		.align	2
 106              	.L10:
 107 001c 00000000 		.word	.LANCHOR0
 108              		.cfi_endproc
 109              	.LFE65:
 111              		.section	.text.ssd1306_UpdateScreen,"ax",%progbits
 112              		.align	2
 113              		.global	ssd1306_UpdateScreen
 114              		.thumb
 115              		.thumb_func
 117              	ssd1306_UpdateScreen:
 118              	.LFB66:
  87:Src/ssd1306.c **** 
  88:Src/ssd1306.c **** //
  89:Src/ssd1306.c **** //  Write the screenbuffer with changed to the screen
  90:Src/ssd1306.c **** //
  91:Src/ssd1306.c **** void ssd1306_UpdateScreen(void) 
  92:Src/ssd1306.c **** {
 119              		.loc 1 92 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123 0000 10B5     		push	{r4, lr}
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 4, -8
 127              		.cfi_offset 14, -4
 128 0002 84B0     		sub	sp, sp, #16
 129              	.LCFI4:
 130              		.cfi_def_cfa_offset 24
 131              	.LVL7:
  93:Src/ssd1306.c **** 	uint8_t i;
  94:Src/ssd1306.c **** 	
  95:Src/ssd1306.c **** 	for (i = 0; i < 8; i++) {
 132              		.loc 1 95 0
 133 0004 0024     		movs	r4, #0
 134 0006 1AE0     		b	.L13
 135              	.LVL8:
 136              	.L14:
ARM GAS  /tmp/ccR5olrN.s 			page 5


  96:Src/ssd1306.c **** 		ssd1306_WriteCommand(0xB0 + i);
 137              		.loc 1 96 0 discriminator 3
 138 0008 A4F15000 		sub	r0, r4, #80
 139 000c C0B2     		uxtb	r0, r0
 140 000e FFF7FEFF 		bl	ssd1306_WriteCommand
 141              	.LVL9:
  97:Src/ssd1306.c **** 		ssd1306_WriteCommand(0x00);
 142              		.loc 1 97 0 discriminator 3
 143 0012 0020     		movs	r0, #0
 144 0014 FFF7FEFF 		bl	ssd1306_WriteCommand
 145              	.LVL10:
  98:Src/ssd1306.c **** 		ssd1306_WriteCommand(0x10);
 146              		.loc 1 98 0 discriminator 3
 147 0018 1020     		movs	r0, #16
 148 001a FFF7FEFF 		bl	ssd1306_WriteCommand
 149              	.LVL11:
  99:Src/ssd1306.c **** 
 100:Src/ssd1306.c **** 		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH
 150              		.loc 1 100 0 discriminator 3
 151 001e 0A4B     		ldr	r3, .L16
 152 0020 03EBC413 		add	r3, r3, r4, lsl #7
 153 0024 0093     		str	r3, [sp]
 154 0026 8023     		movs	r3, #128
 155 0028 0193     		str	r3, [sp, #4]
 156 002a 6423     		movs	r3, #100
 157 002c 0293     		str	r3, [sp, #8]
 158 002e 0748     		ldr	r0, .L16+4
 159 0030 7821     		movs	r1, #120
 160 0032 4022     		movs	r2, #64
 161 0034 0123     		movs	r3, #1
 162 0036 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 163              	.LVL12:
  95:Src/ssd1306.c **** 		ssd1306_WriteCommand(0xB0 + i);
 164              		.loc 1 95 0 discriminator 3
 165 003a 0134     		adds	r4, r4, #1
 166              	.LVL13:
 167 003c E4B2     		uxtb	r4, r4
 168              	.LVL14:
 169              	.L13:
  95:Src/ssd1306.c **** 		ssd1306_WriteCommand(0xB0 + i);
 170              		.loc 1 95 0 is_stmt 0 discriminator 1
 171 003e 072C     		cmp	r4, #7
 172 0040 E2D9     		bls	.L14
 101:Src/ssd1306.c **** 	}
 102:Src/ssd1306.c **** }
 173              		.loc 1 102 0 is_stmt 1
 174 0042 04B0     		add	sp, sp, #16
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 8
 177              		@ sp needed
 178 0044 10BD     		pop	{r4, pc}
 179              	.LVL15:
 180              	.L17:
 181 0046 00BF     		.align	2
 182              	.L16:
 183 0048 00000000 		.word	.LANCHOR0
 184 004c 00000000 		.word	hi2c1
ARM GAS  /tmp/ccR5olrN.s 			page 6


 185              		.cfi_endproc
 186              	.LFE66:
 188              		.section	.text.ssd1306_Init,"ax",%progbits
 189              		.align	2
 190              		.global	ssd1306_Init
 191              		.thumb
 192              		.thumb_func
 194              	ssd1306_Init:
 195              	.LFB64:
  25:Src/ssd1306.c **** 	// Wait for the screen to boot
 196              		.loc 1 25 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200 0000 08B5     		push	{r3, lr}
 201              	.LCFI6:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
  27:Src/ssd1306.c **** 	
 205              		.loc 1 27 0
 206 0002 6420     		movs	r0, #100
 207 0004 FFF7FEFF 		bl	HAL_Delay
 208              	.LVL16:
  30:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 209              		.loc 1 30 0
 210 0008 AE20     		movs	r0, #174
 211 000a FFF7FEFF 		bl	ssd1306_WriteCommand
 212              	.LVL17:
  31:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Ad
 213              		.loc 1 31 0
 214 000e 2020     		movs	r0, #32
 215 0010 FFF7FEFF 		bl	ssd1306_WriteCommand
 216              	.LVL18:
  32:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 217              		.loc 1 32 0
 218 0014 1020     		movs	r0, #16
 219 0016 FFF7FEFF 		bl	ssd1306_WriteCommand
 220              	.LVL19:
  33:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 221              		.loc 1 33 0
 222 001a B020     		movs	r0, #176
 223 001c FFF7FEFF 		bl	ssd1306_WriteCommand
 224              	.LVL20:
  34:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x00); //---set low column address
 225              		.loc 1 34 0
 226 0020 C820     		movs	r0, #200
 227 0022 FFF7FEFF 		bl	ssd1306_WriteCommand
 228              	.LVL21:
  35:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x10); //---set high column address
 229              		.loc 1 35 0
 230 0026 0020     		movs	r0, #0
 231 0028 FFF7FEFF 		bl	ssd1306_WriteCommand
 232              	.LVL22:
  36:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x40); //--set start line address
 233              		.loc 1 36 0
 234 002c 1020     		movs	r0, #16
ARM GAS  /tmp/ccR5olrN.s 			page 7


 235 002e FFF7FEFF 		bl	ssd1306_WriteCommand
 236              	.LVL23:
  37:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x81); //--set contrast control register
 237              		.loc 1 37 0
 238 0032 4020     		movs	r0, #64
 239 0034 FFF7FEFF 		bl	ssd1306_WriteCommand
 240              	.LVL24:
  38:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xFF);
 241              		.loc 1 38 0
 242 0038 8120     		movs	r0, #129
 243 003a FFF7FEFF 		bl	ssd1306_WriteCommand
 244              	.LVL25:
  39:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 245              		.loc 1 39 0
 246 003e FF20     		movs	r0, #255
 247 0040 FFF7FEFF 		bl	ssd1306_WriteCommand
 248              	.LVL26:
  40:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA6); //--set normal display
 249              		.loc 1 40 0
 250 0044 A120     		movs	r0, #161
 251 0046 FFF7FEFF 		bl	ssd1306_WriteCommand
 252              	.LVL27:
  41:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 253              		.loc 1 41 0
 254 004a A620     		movs	r0, #166
 255 004c FFF7FEFF 		bl	ssd1306_WriteCommand
 256              	.LVL28:
  42:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x3F); //
 257              		.loc 1 42 0
 258 0050 A820     		movs	r0, #168
 259 0052 FFF7FEFF 		bl	ssd1306_WriteCommand
 260              	.LVL29:
  43:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 261              		.loc 1 43 0
 262 0056 3F20     		movs	r0, #63
 263 0058 FFF7FEFF 		bl	ssd1306_WriteCommand
 264              	.LVL30:
  44:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD3); //-set display offset
 265              		.loc 1 44 0
 266 005c A420     		movs	r0, #164
 267 005e FFF7FEFF 		bl	ssd1306_WriteCommand
 268              	.LVL31:
  45:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x00); //-not offset
 269              		.loc 1 45 0
 270 0062 D320     		movs	r0, #211
 271 0064 FFF7FEFF 		bl	ssd1306_WriteCommand
 272              	.LVL32:
  46:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 273              		.loc 1 46 0
 274 0068 0020     		movs	r0, #0
 275 006a FFF7FEFF 		bl	ssd1306_WriteCommand
 276              	.LVL33:
  47:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xF0); //--set divide ratio
 277              		.loc 1 47 0
 278 006e D520     		movs	r0, #213
 279 0070 FFF7FEFF 		bl	ssd1306_WriteCommand
 280              	.LVL34:
ARM GAS  /tmp/ccR5olrN.s 			page 8


  48:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 281              		.loc 1 48 0
 282 0074 F020     		movs	r0, #240
 283 0076 FFF7FEFF 		bl	ssd1306_WriteCommand
 284              	.LVL35:
  49:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x22); //
 285              		.loc 1 49 0
 286 007a D920     		movs	r0, #217
 287 007c FFF7FEFF 		bl	ssd1306_WriteCommand
 288              	.LVL36:
  50:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 289              		.loc 1 50 0
 290 0080 2220     		movs	r0, #34
 291 0082 FFF7FEFF 		bl	ssd1306_WriteCommand
 292              	.LVL37:
  51:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x12);
 293              		.loc 1 51 0
 294 0086 DA20     		movs	r0, #218
 295 0088 FFF7FEFF 		bl	ssd1306_WriteCommand
 296              	.LVL38:
  52:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xDB); //--set vcomh
 297              		.loc 1 52 0
 298 008c 1220     		movs	r0, #18
 299 008e FFF7FEFF 		bl	ssd1306_WriteCommand
 300              	.LVL39:
  53:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 301              		.loc 1 53 0
 302 0092 DB20     		movs	r0, #219
 303 0094 FFF7FEFF 		bl	ssd1306_WriteCommand
 304              	.LVL40:
  54:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 305              		.loc 1 54 0
 306 0098 2020     		movs	r0, #32
 307 009a FFF7FEFF 		bl	ssd1306_WriteCommand
 308              	.LVL41:
  55:Src/ssd1306.c **** 	ssd1306_WriteCommand(0x14); //
 309              		.loc 1 55 0
 310 009e 8D20     		movs	r0, #141
 311 00a0 FFF7FEFF 		bl	ssd1306_WriteCommand
 312              	.LVL42:
  56:Src/ssd1306.c **** 	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 313              		.loc 1 56 0
 314 00a4 1420     		movs	r0, #20
 315 00a6 FFF7FEFF 		bl	ssd1306_WriteCommand
 316              	.LVL43:
  57:Src/ssd1306.c **** 	
 317              		.loc 1 57 0
 318 00aa AF20     		movs	r0, #175
 319 00ac FFF7FEFF 		bl	ssd1306_WriteCommand
 320              	.LVL44:
  60:Src/ssd1306.c **** 	
 321              		.loc 1 60 0
 322 00b0 0020     		movs	r0, #0
 323 00b2 FFF7FEFF 		bl	ssd1306_Fill
 324              	.LVL45:
  63:Src/ssd1306.c **** 	
 325              		.loc 1 63 0
ARM GAS  /tmp/ccR5olrN.s 			page 9


 326 00b6 FFF7FEFF 		bl	ssd1306_UpdateScreen
 327              	.LVL46:
  66:Src/ssd1306.c **** 	SSD1306.CurrentY = 0;
 328              		.loc 1 66 0
 329 00ba 034B     		ldr	r3, .L20
 330 00bc 0022     		movs	r2, #0
 331 00be 1A80     		strh	r2, [r3]	@ movhi
  67:Src/ssd1306.c **** 	
 332              		.loc 1 67 0
 333 00c0 5A80     		strh	r2, [r3, #2]	@ movhi
  69:Src/ssd1306.c **** 	
 334              		.loc 1 69 0
 335 00c2 0120     		movs	r0, #1
 336 00c4 5871     		strb	r0, [r3, #5]
  72:Src/ssd1306.c **** 
 337              		.loc 1 72 0
 338 00c6 08BD     		pop	{r3, pc}
 339              	.L21:
 340              		.align	2
 341              	.L20:
 342 00c8 00000000 		.word	.LANCHOR1
 343              		.cfi_endproc
 344              	.LFE64:
 346              		.section	.text.ssd1306_DrawPixel,"ax",%progbits
 347              		.align	2
 348              		.global	ssd1306_DrawPixel
 349              		.thumb
 350              		.thumb_func
 352              	ssd1306_DrawPixel:
 353              	.LFB67:
 103:Src/ssd1306.c **** 
 104:Src/ssd1306.c **** //
 105:Src/ssd1306.c **** //	Draw one pixel in the screenbuffer
 106:Src/ssd1306.c **** //	X => X Coordinate
 107:Src/ssd1306.c **** //	Y => Y Coordinate
 108:Src/ssd1306.c **** //	color => Pixel color
 109:Src/ssd1306.c **** //
 110:Src/ssd1306.c **** void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
 111:Src/ssd1306.c **** {
 354              		.loc 1 111 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359              	.LVL47:
 112:Src/ssd1306.c **** 	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 360              		.loc 1 112 0
 361 0000 10F0800F 		tst	r0, #128
 362 0004 21D1     		bne	.L22
 363              		.loc 1 112 0 is_stmt 0 discriminator 1
 364 0006 3F29     		cmp	r1, #63
 365 0008 1FD8     		bhi	.L22
 113:Src/ssd1306.c **** 	{
 114:Src/ssd1306.c **** 		// Don't write outside the buffer
 115:Src/ssd1306.c **** 		return;
 116:Src/ssd1306.c **** 	}
 117:Src/ssd1306.c **** 	
ARM GAS  /tmp/ccR5olrN.s 			page 10


 118:Src/ssd1306.c **** 	// Check if pixel should be inverted
 119:Src/ssd1306.c **** 	if (SSD1306.Inverted) 
 366              		.loc 1 119 0 is_stmt 1
 367 000a 104B     		ldr	r3, .L26
 368 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 369 000e 13B1     		cbz	r3, .L24
 120:Src/ssd1306.c **** 	{
 121:Src/ssd1306.c **** 		color = (SSD1306_COLOR)!color;
 370              		.loc 1 121 0
 371 0010 B2FA82F2 		clz	r2, r2
 372              	.LVL48:
 373 0014 5209     		lsrs	r2, r2, #5
 374              	.LVL49:
 375              	.L24:
 122:Src/ssd1306.c **** 	}
 123:Src/ssd1306.c **** 	
 124:Src/ssd1306.c **** 	// Draw in the right color
 125:Src/ssd1306.c **** 	if (color == White)
 376              		.loc 1 125 0
 377 0016 012A     		cmp	r2, #1
 378 0018 0BD1     		bne	.L25
 126:Src/ssd1306.c **** 	{
 127:Src/ssd1306.c **** 		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 379              		.loc 1 127 0
 380 001a CB08     		lsrs	r3, r1, #3
 381 001c 00EBC310 		add	r0, r0, r3, lsl #7
 382              	.LVL50:
 383 0020 01F00701 		and	r1, r1, #7
 384              	.LVL51:
 385 0024 0123     		movs	r3, #1
 386 0026 8B40     		lsls	r3, r3, r1
 387 0028 094A     		ldr	r2, .L26+4
 388              	.LVL52:
 389 002a 115C     		ldrb	r1, [r2, r0]	@ zero_extendqisi2
 390 002c 0B43     		orrs	r3, r3, r1
 391 002e 1354     		strb	r3, [r2, r0]
 392 0030 7047     		bx	lr
 393              	.LVL53:
 394              	.L25:
 128:Src/ssd1306.c **** 	} 
 129:Src/ssd1306.c **** 	else 
 130:Src/ssd1306.c **** 	{
 131:Src/ssd1306.c **** 		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 395              		.loc 1 131 0
 396 0032 CB08     		lsrs	r3, r1, #3
 397 0034 00EBC310 		add	r0, r0, r3, lsl #7
 398              	.LVL54:
 399 0038 01F00701 		and	r1, r1, #7
 400              	.LVL55:
 401 003c 0123     		movs	r3, #1
 402 003e 8B40     		lsls	r3, r3, r1
 403 0040 0349     		ldr	r1, .L26+4
 404 0042 0A5C     		ldrb	r2, [r1, r0]	@ zero_extendqisi2
 405              	.LVL56:
 406 0044 22EA0303 		bic	r3, r2, r3
 407 0048 0B54     		strb	r3, [r1, r0]
 408              	.L22:
ARM GAS  /tmp/ccR5olrN.s 			page 11


 409 004a 7047     		bx	lr
 410              	.L27:
 411              		.align	2
 412              	.L26:
 413 004c 00000000 		.word	.LANCHOR1
 414 0050 00000000 		.word	.LANCHOR0
 415              		.cfi_endproc
 416              	.LFE67:
 418              		.section	.text.ssd1306_WriteChar,"ax",%progbits
 419              		.align	2
 420              		.global	ssd1306_WriteChar
 421              		.thumb
 422              		.thumb_func
 424              	ssd1306_WriteChar:
 425              	.LFB68:
 132:Src/ssd1306.c **** 	}
 133:Src/ssd1306.c **** }
 134:Src/ssd1306.c **** 
 135:Src/ssd1306.c **** //
 136:Src/ssd1306.c **** //  Draw 1 char to the screen buffer
 137:Src/ssd1306.c **** //	ch 		=> char om weg te schrijven
 138:Src/ssd1306.c **** //	Font 	=> Font waarmee we gaan schrijven
 139:Src/ssd1306.c **** //	color 	=> Black or White
 140:Src/ssd1306.c **** //
 141:Src/ssd1306.c **** char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
 142:Src/ssd1306.c **** {
 426              		.loc 1 142 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL57:
 431 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 432              	.LCFI7:
 433              		.cfi_def_cfa_offset 36
 434              		.cfi_offset 4, -36
 435              		.cfi_offset 5, -32
 436              		.cfi_offset 6, -28
 437              		.cfi_offset 7, -24
 438              		.cfi_offset 8, -20
 439              		.cfi_offset 9, -16
 440              		.cfi_offset 10, -12
 441              		.cfi_offset 11, -8
 442              		.cfi_offset 14, -4
 443 0004 83B0     		sub	sp, sp, #12
 444              	.LCFI8:
 445              		.cfi_def_cfa_offset 48
 446 0006 02AC     		add	r4, sp, #8
 447 0008 04E90600 		stmdb	r4, {r1, r2}
 143:Src/ssd1306.c **** 	uint32_t i, b, j;
 144:Src/ssd1306.c **** 	
 145:Src/ssd1306.c **** 	// Check remaining space on current line
 146:Src/ssd1306.c **** 	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 448              		.loc 1 146 0
 449 000c 244A     		ldr	r2, .L39
 450 000e 1288     		ldrh	r2, [r2]
 451 0010 9DF80060 		ldrb	r6, [sp]	@ zero_extendqisi2
 452 0014 3244     		add	r2, r2, r6
ARM GAS  /tmp/ccR5olrN.s 			page 12


 453 0016 7F2A     		cmp	r2, #127
 454 0018 3CDC     		bgt	.L36
 147:Src/ssd1306.c **** 		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 455              		.loc 1 147 0 discriminator 1
 456 001a 214A     		ldr	r2, .L39
 457 001c 5288     		ldrh	r2, [r2, #2]
 458 001e 9DF801A0 		ldrb	r10, [sp, #1]	@ zero_extendqisi2
 459 0022 D346     		mov	fp, r10
 460 0024 5244     		add	r2, r2, r10
 146:Src/ssd1306.c **** 		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 461              		.loc 1 146 0 discriminator 1
 462 0026 3F2A     		cmp	r2, #63
 463 0028 36DC     		bgt	.L37
 464 002a 9846     		mov	r8, r3
 465 002c 8146     		mov	r9, r0
 466 002e 0025     		movs	r5, #0
 467 0030 28E0     		b	.L30
 468              	.LVL58:
 469              	.L35:
 148:Src/ssd1306.c **** 	{
 149:Src/ssd1306.c **** 		// Not enough space on current line
 150:Src/ssd1306.c **** 		return 0;
 151:Src/ssd1306.c **** 	}
 152:Src/ssd1306.c **** 	
 153:Src/ssd1306.c **** 	// Use the font to write
 154:Src/ssd1306.c **** 	for (i = 0; i < Font.FontHeight; i++)
 155:Src/ssd1306.c **** 	{
 156:Src/ssd1306.c **** 		b = Font.data[(ch - 32) * Font.FontHeight + i];
 470              		.loc 1 156 0
 471 0032 A9F12003 		sub	r3, r9, #32
 472 0036 03FB0B53 		mla	r3, r3, fp, r5
 473 003a 019A     		ldr	r2, [sp, #4]
 474 003c 32F81370 		ldrh	r7, [r2, r3, lsl #1]
 475              	.LVL59:
 157:Src/ssd1306.c **** 		for (j = 0; j < Font.FontWidth; j++)
 476              		.loc 1 157 0
 477 0040 0024     		movs	r4, #0
 478 0042 1CE0     		b	.L31
 479              	.LVL60:
 480              	.L34:
 158:Src/ssd1306.c **** 		{
 159:Src/ssd1306.c **** 			if ((b << j) & 0x8000) 
 481              		.loc 1 159 0
 482 0044 07FA04F3 		lsl	r3, r7, r4
 483 0048 13F4004F 		tst	r3, #32768
 484 004c 0AD0     		beq	.L32
 160:Src/ssd1306.c **** 			{
 161:Src/ssd1306.c **** 				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 485              		.loc 1 161 0
 486 004e 144B     		ldr	r3, .L39
 487 0050 1888     		ldrh	r0, [r3]
 488 0052 5988     		ldrh	r1, [r3, #2]
 489 0054 2044     		add	r0, r0, r4
 490 0056 2944     		add	r1, r1, r5
 491 0058 C0B2     		uxtb	r0, r0
 492 005a C9B2     		uxtb	r1, r1
 493 005c 4246     		mov	r2, r8
ARM GAS  /tmp/ccR5olrN.s 			page 13


 494 005e FFF7FEFF 		bl	ssd1306_DrawPixel
 495              	.LVL61:
 496 0062 0BE0     		b	.L33
 497              	.L32:
 162:Src/ssd1306.c **** 			} 
 163:Src/ssd1306.c **** 			else 
 164:Src/ssd1306.c **** 			{
 165:Src/ssd1306.c **** 				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 498              		.loc 1 165 0
 499 0064 0E4B     		ldr	r3, .L39
 500 0066 1888     		ldrh	r0, [r3]
 501 0068 5988     		ldrh	r1, [r3, #2]
 502 006a 2044     		add	r0, r0, r4
 503 006c 2944     		add	r1, r1, r5
 504 006e C0B2     		uxtb	r0, r0
 505 0070 C9B2     		uxtb	r1, r1
 506 0072 B8FA88F2 		clz	r2, r8
 507 0076 5209     		lsrs	r2, r2, #5
 508 0078 FFF7FEFF 		bl	ssd1306_DrawPixel
 509              	.LVL62:
 510              	.L33:
 157:Src/ssd1306.c **** 		{
 511              		.loc 1 157 0 discriminator 2
 512 007c 0134     		adds	r4, r4, #1
 513              	.LVL63:
 514              	.L31:
 157:Src/ssd1306.c **** 		{
 515              		.loc 1 157 0 is_stmt 0 discriminator 1
 516 007e A642     		cmp	r6, r4
 517 0080 E0D8     		bhi	.L34
 154:Src/ssd1306.c **** 	{
 518              		.loc 1 154 0 is_stmt 1 discriminator 2
 519 0082 0135     		adds	r5, r5, #1
 520              	.LVL64:
 521              	.L30:
 154:Src/ssd1306.c **** 	{
 522              		.loc 1 154 0 is_stmt 0 discriminator 1
 523 0084 AA45     		cmp	r10, r5
 524 0086 D4D8     		bhi	.L35
 166:Src/ssd1306.c **** 			}
 167:Src/ssd1306.c **** 		}
 168:Src/ssd1306.c **** 	}
 169:Src/ssd1306.c **** 	
 170:Src/ssd1306.c **** 	// The current space is now taken
 171:Src/ssd1306.c **** 	SSD1306.CurrentX += Font.FontWidth;
 525              		.loc 1 171 0 is_stmt 1
 526 0088 054A     		ldr	r2, .L39
 527 008a 1388     		ldrh	r3, [r2]
 528 008c 1E44     		add	r6, r6, r3
 529 008e 1680     		strh	r6, [r2]	@ movhi
 172:Src/ssd1306.c **** 	
 173:Src/ssd1306.c **** 	// Return written char for validation
 174:Src/ssd1306.c **** 	return ch;
 530              		.loc 1 174 0
 531 0090 4846     		mov	r0, r9
 532 0092 02E0     		b	.L29
 533              	.LVL65:
ARM GAS  /tmp/ccR5olrN.s 			page 14


 534              	.L36:
 150:Src/ssd1306.c **** 	}
 535              		.loc 1 150 0
 536 0094 0020     		movs	r0, #0
 537              	.LVL66:
 538 0096 00E0     		b	.L29
 539              	.LVL67:
 540              	.L37:
 541 0098 0020     		movs	r0, #0
 542              	.LVL68:
 543              	.L29:
 175:Src/ssd1306.c **** }
 544              		.loc 1 175 0
 545 009a 03B0     		add	sp, sp, #12
 546              	.LCFI9:
 547              		.cfi_def_cfa_offset 36
 548              		@ sp needed
 549 009c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 550              	.L40:
 551              		.align	2
 552              	.L39:
 553 00a0 00000000 		.word	.LANCHOR1
 554              		.cfi_endproc
 555              	.LFE68:
 557              		.section	.text.ssd1306_WriteString,"ax",%progbits
 558              		.align	2
 559              		.global	ssd1306_WriteString
 560              		.thumb
 561              		.thumb_func
 563              	ssd1306_WriteString:
 564              	.LFB69:
 176:Src/ssd1306.c **** 
 177:Src/ssd1306.c **** //
 178:Src/ssd1306.c **** //  Write full string to screenbuffer
 179:Src/ssd1306.c **** //
 180:Src/ssd1306.c **** char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
 181:Src/ssd1306.c **** {
 565              		.loc 1 181 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              	.LVL69:
 570 0000 30B5     		push	{r4, r5, lr}
 571              	.LCFI10:
 572              		.cfi_def_cfa_offset 12
 573              		.cfi_offset 4, -12
 574              		.cfi_offset 5, -8
 575              		.cfi_offset 14, -4
 576 0002 83B0     		sub	sp, sp, #12
 577              	.LCFI11:
 578              		.cfi_def_cfa_offset 24
 579 0004 0446     		mov	r4, r0
 580 0006 02A8     		add	r0, sp, #8
 581              	.LVL70:
 582 0008 00E90600 		stmdb	r0, {r1, r2}
 583 000c 1D46     		mov	r5, r3
 182:Src/ssd1306.c **** 	// Write until null-byte
ARM GAS  /tmp/ccR5olrN.s 			page 15


 183:Src/ssd1306.c **** 	while (*str) 
 584              		.loc 1 183 0
 585 000e 0AE0     		b	.L42
 586              	.LVL71:
 587              	.L45:
 184:Src/ssd1306.c **** 	{
 185:Src/ssd1306.c **** 		if (ssd1306_WriteChar(*str, Font, color) != *str)
 588              		.loc 1 185 0
 589 0010 1846     		mov	r0, r3
 590 0012 02AB     		add	r3, sp, #8
 591 0014 13E90600 		ldmdb	r3, {r1, r2}
 592 0018 2B46     		mov	r3, r5
 593 001a FFF7FEFF 		bl	ssd1306_WriteChar
 594              	.LVL72:
 595 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 596 0020 9842     		cmp	r0, r3
 597 0022 03D1     		bne	.L44
 186:Src/ssd1306.c **** 		{
 187:Src/ssd1306.c **** 			// Char could not be written
 188:Src/ssd1306.c **** 			return *str;
 189:Src/ssd1306.c **** 		}
 190:Src/ssd1306.c **** 		
 191:Src/ssd1306.c **** 		// Next char
 192:Src/ssd1306.c **** 		str++;
 598              		.loc 1 192 0
 599 0024 0134     		adds	r4, r4, #1
 600              	.LVL73:
 601              	.L42:
 183:Src/ssd1306.c **** 	{
 602              		.loc 1 183 0
 603 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 604 0028 002B     		cmp	r3, #0
 605 002a F1D1     		bne	.L45
 606              	.L44:
 193:Src/ssd1306.c **** 	}
 194:Src/ssd1306.c **** 	
 195:Src/ssd1306.c **** 	// Everything ok
 196:Src/ssd1306.c **** 	return *str;
 197:Src/ssd1306.c **** }
 607              		.loc 1 197 0
 608 002c 1846     		mov	r0, r3
 609 002e 03B0     		add	sp, sp, #12
 610              	.LCFI12:
 611              		.cfi_def_cfa_offset 12
 612              		@ sp needed
 613 0030 30BD     		pop	{r4, r5, pc}
 614              		.cfi_endproc
 615              	.LFE69:
 617 0032 00BF     		.section	.text.ssd1306_SetCursor,"ax",%progbits
 618              		.align	2
 619              		.global	ssd1306_SetCursor
 620              		.thumb
 621              		.thumb_func
 623              	ssd1306_SetCursor:
 624              	.LFB70:
 198:Src/ssd1306.c **** 
 199:Src/ssd1306.c **** //
ARM GAS  /tmp/ccR5olrN.s 			page 16


 200:Src/ssd1306.c **** //	Position the cursor
 201:Src/ssd1306.c **** //
 202:Src/ssd1306.c **** void ssd1306_SetCursor(uint8_t x, uint8_t y) 
 203:Src/ssd1306.c **** {
 625              		.loc 1 203 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630              	.LVL74:
 204:Src/ssd1306.c **** 	SSD1306.CurrentX = x;
 631              		.loc 1 204 0
 632 0000 014B     		ldr	r3, .L48
 633 0002 1880     		strh	r0, [r3]	@ movhi
 205:Src/ssd1306.c **** 	SSD1306.CurrentY = y;
 634              		.loc 1 205 0
 635 0004 5980     		strh	r1, [r3, #2]	@ movhi
 636 0006 7047     		bx	lr
 637              	.L49:
 638              		.align	2
 639              	.L48:
 640 0008 00000000 		.word	.LANCHOR1
 641              		.cfi_endproc
 642              	.LFE70:
 644              		.section	.bss.SSD1306_Buffer,"aw",%nobits
 645              		.align	2
 646              		.set	.LANCHOR0,. + 0
 649              	SSD1306_Buffer:
 650 0000 00000000 		.space	1024
 650      00000000 
 650      00000000 
 650      00000000 
 650      00000000 
 651              		.section	.bss.SSD1306,"aw",%nobits
 652              		.align	2
 653              		.set	.LANCHOR1,. + 0
 656              	SSD1306:
 657 0000 00000000 		.space	6
 657      0000
 658              		.text
 659              	.Letext0:
 660              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 661              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 662              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 663              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 664              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 665              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 666              		.file 8 "Src/fonts.h"
 667              		.file 9 "Src/ssd1306.h"
 668              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 669              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccR5olrN.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1306.c
     /tmp/ccR5olrN.s:19     .text.ssd1306_WriteCommand:0000000000000000 $t
     /tmp/ccR5olrN.s:23     .text.ssd1306_WriteCommand:0000000000000000 ssd1306_WriteCommand
     /tmp/ccR5olrN.s:62     .text.ssd1306_WriteCommand:0000000000000024 $d
     /tmp/ccR5olrN.s:67     .text.ssd1306_Fill:0000000000000000 $t
     /tmp/ccR5olrN.s:72     .text.ssd1306_Fill:0000000000000000 ssd1306_Fill
     /tmp/ccR5olrN.s:107    .text.ssd1306_Fill:000000000000001c $d
     /tmp/ccR5olrN.s:112    .text.ssd1306_UpdateScreen:0000000000000000 $t
     /tmp/ccR5olrN.s:117    .text.ssd1306_UpdateScreen:0000000000000000 ssd1306_UpdateScreen
     /tmp/ccR5olrN.s:183    .text.ssd1306_UpdateScreen:0000000000000048 $d
     /tmp/ccR5olrN.s:189    .text.ssd1306_Init:0000000000000000 $t
     /tmp/ccR5olrN.s:194    .text.ssd1306_Init:0000000000000000 ssd1306_Init
     /tmp/ccR5olrN.s:342    .text.ssd1306_Init:00000000000000c8 $d
     /tmp/ccR5olrN.s:347    .text.ssd1306_DrawPixel:0000000000000000 $t
     /tmp/ccR5olrN.s:352    .text.ssd1306_DrawPixel:0000000000000000 ssd1306_DrawPixel
     /tmp/ccR5olrN.s:413    .text.ssd1306_DrawPixel:000000000000004c $d
     /tmp/ccR5olrN.s:419    .text.ssd1306_WriteChar:0000000000000000 $t
     /tmp/ccR5olrN.s:424    .text.ssd1306_WriteChar:0000000000000000 ssd1306_WriteChar
     /tmp/ccR5olrN.s:553    .text.ssd1306_WriteChar:00000000000000a0 $d
     /tmp/ccR5olrN.s:558    .text.ssd1306_WriteString:0000000000000000 $t
     /tmp/ccR5olrN.s:563    .text.ssd1306_WriteString:0000000000000000 ssd1306_WriteString
     /tmp/ccR5olrN.s:618    .text.ssd1306_SetCursor:0000000000000000 $t
     /tmp/ccR5olrN.s:623    .text.ssd1306_SetCursor:0000000000000000 ssd1306_SetCursor
     /tmp/ccR5olrN.s:640    .text.ssd1306_SetCursor:0000000000000008 $d
     /tmp/ccR5olrN.s:645    .bss.SSD1306_Buffer:0000000000000000 $d
     /tmp/ccR5olrN.s:649    .bss.SSD1306_Buffer:0000000000000000 SSD1306_Buffer
     /tmp/ccR5olrN.s:652    .bss.SSD1306:0000000000000000 $d
     /tmp/ccR5olrN.s:656    .bss.SSD1306:0000000000000000 SSD1306
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_I2C_Mem_Write
hi2c1
HAL_Delay

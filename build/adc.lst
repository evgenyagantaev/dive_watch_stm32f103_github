ARM GAS  /tmp/cc0nmd71.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MX_ADC1_Init,"ax",%progbits
  19              		.align	2
  20              		.global	MX_ADC1_Init
  21              		.thumb
  22              		.thumb_func
  24              	MX_ADC1_Init:
  25              	.LFB63:
  26              		.file 1 "Src/adc.c"
   1:Src/adc.c     **** /**
   2:Src/adc.c     ****   ******************************************************************************
   3:Src/adc.c     ****   * File Name          : ADC.c
   4:Src/adc.c     ****   * Description        : This file provides code for the configuration
   5:Src/adc.c     ****   *                      of the ADC instances.
   6:Src/adc.c     ****   ******************************************************************************
   7:Src/adc.c     ****   ** This notice applies to any and all portions of this file
   8:Src/adc.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/adc.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/adc.c     ****   * inserted by the user or by software development tools
  11:Src/adc.c     ****   * are owned by their respective copyright owners.
  12:Src/adc.c     ****   *
  13:Src/adc.c     ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/adc.c     ****   *
  15:Src/adc.c     ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/adc.c     ****   * are permitted provided that the following conditions are met:
  17:Src/adc.c     ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/adc.c     ****   *      this list of conditions and the following disclaimer.
  19:Src/adc.c     ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/adc.c     ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/adc.c     ****   *      and/or other materials provided with the distribution.
  22:Src/adc.c     ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/adc.c     ****   *      may be used to endorse or promote products derived from this software
  24:Src/adc.c     ****   *      without specific prior written permission.
  25:Src/adc.c     ****   *
  26:Src/adc.c     ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/adc.c     ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/adc.c     ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/adc.c     ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/adc.c     ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/adc.c     ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/adc.c     ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cc0nmd71.s 			page 2


  33:Src/adc.c     ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/adc.c     ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/adc.c     ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/adc.c     ****   *
  37:Src/adc.c     ****   ******************************************************************************
  38:Src/adc.c     ****   */
  39:Src/adc.c     **** 
  40:Src/adc.c     **** /* Includes ------------------------------------------------------------------*/
  41:Src/adc.c     **** #include "adc.h"
  42:Src/adc.c     **** 
  43:Src/adc.c     **** #include "gpio.h"
  44:Src/adc.c     **** 
  45:Src/adc.c     **** /* USER CODE BEGIN 0 */
  46:Src/adc.c     **** 
  47:Src/adc.c     **** /* USER CODE END 0 */
  48:Src/adc.c     **** 
  49:Src/adc.c     **** ADC_HandleTypeDef hadc1;
  50:Src/adc.c     **** ADC_HandleTypeDef hadc2;
  51:Src/adc.c     **** 
  52:Src/adc.c     **** /* ADC1 init function */
  53:Src/adc.c     **** void MX_ADC1_Init(void)
  54:Src/adc.c     **** {
  27              		.loc 1 54 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 00B5     		push	{lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 85B0     		sub	sp, sp, #20
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  55:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
  56:Src/adc.c     **** 
  57:Src/adc.c     ****     /**Common config 
  58:Src/adc.c     ****     */
  59:Src/adc.c     ****   hadc1.Instance = ADC1;
  38              		.loc 1 59 0
  39 0004 1248     		ldr	r0, .L5
  40 0006 134B     		ldr	r3, .L5+4
  41 0008 0360     		str	r3, [r0]
  60:Src/adc.c     ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  42              		.loc 1 60 0
  43 000a 0023     		movs	r3, #0
  44 000c 8360     		str	r3, [r0, #8]
  61:Src/adc.c     ****   hadc1.Init.ContinuousConvMode = DISABLE;
  45              		.loc 1 61 0
  46 000e C360     		str	r3, [r0, #12]
  62:Src/adc.c     ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  47              		.loc 1 62 0
  48 0010 4361     		str	r3, [r0, #20]
  63:Src/adc.c     ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  49              		.loc 1 63 0
  50 0012 4FF46022 		mov	r2, #917504
  51 0016 C261     		str	r2, [r0, #28]
  64:Src/adc.c     ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
ARM GAS  /tmp/cc0nmd71.s 			page 3


  52              		.loc 1 64 0
  53 0018 4360     		str	r3, [r0, #4]
  65:Src/adc.c     ****   hadc1.Init.NbrOfConversion = 1;
  54              		.loc 1 65 0
  55 001a 0123     		movs	r3, #1
  56 001c 0361     		str	r3, [r0, #16]
  66:Src/adc.c     ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  57              		.loc 1 66 0
  58 001e FFF7FEFF 		bl	HAL_ADC_Init
  59              	.LVL0:
  60 0022 18B1     		cbz	r0, .L2
  67:Src/adc.c     ****   {
  68:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
  61              		.loc 1 68 0
  62 0024 0C48     		ldr	r0, .L5+8
  63 0026 4421     		movs	r1, #68
  64 0028 FFF7FEFF 		bl	_Error_Handler
  65              	.LVL1:
  66              	.L2:
  69:Src/adc.c     ****   }
  70:Src/adc.c     **** 
  71:Src/adc.c     ****     /**Configure Regular Channel 
  72:Src/adc.c     ****     */
  73:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_0;
  67              		.loc 1 73 0
  68 002c 0023     		movs	r3, #0
  69 002e 0193     		str	r3, [sp, #4]
  74:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_1;
  70              		.loc 1 74 0
  71 0030 0122     		movs	r2, #1
  72 0032 0292     		str	r2, [sp, #8]
  75:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  73              		.loc 1 75 0
  74 0034 0393     		str	r3, [sp, #12]
  76:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  75              		.loc 1 76 0
  76 0036 0648     		ldr	r0, .L5
  77 0038 01A9     		add	r1, sp, #4
  78 003a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
  79              	.LVL2:
  80 003e 18B1     		cbz	r0, .L1
  77:Src/adc.c     ****   {
  78:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
  81              		.loc 1 78 0
  82 0040 0548     		ldr	r0, .L5+8
  83 0042 4E21     		movs	r1, #78
  84 0044 FFF7FEFF 		bl	_Error_Handler
  85              	.LVL3:
  86              	.L1:
  79:Src/adc.c     ****   }
  80:Src/adc.c     **** 
  81:Src/adc.c     **** }
  87              		.loc 1 81 0
  88 0048 05B0     		add	sp, sp, #20
  89              	.LCFI2:
  90              		.cfi_def_cfa_offset 4
  91              		@ sp needed
ARM GAS  /tmp/cc0nmd71.s 			page 4


  92 004a 5DF804FB 		ldr	pc, [sp], #4
  93              	.L6:
  94 004e 00BF     		.align	2
  95              	.L5:
  96 0050 00000000 		.word	hadc1
  97 0054 00240140 		.word	1073816576
  98 0058 00000000 		.word	.LC0
  99              		.cfi_endproc
 100              	.LFE63:
 102              		.section	.text.MX_ADC2_Init,"ax",%progbits
 103              		.align	2
 104              		.global	MX_ADC2_Init
 105              		.thumb
 106              		.thumb_func
 108              	MX_ADC2_Init:
 109              	.LFB64:
  82:Src/adc.c     **** /* ADC2 init function */
  83:Src/adc.c     **** void MX_ADC2_Init(void)
  84:Src/adc.c     **** {
 110              		.loc 1 84 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 16
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 00B5     		push	{lr}
 115              	.LCFI3:
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 14, -4
 118 0002 85B0     		sub	sp, sp, #20
 119              	.LCFI4:
 120              		.cfi_def_cfa_offset 24
  85:Src/adc.c     ****   ADC_ChannelConfTypeDef sConfig;
  86:Src/adc.c     **** 
  87:Src/adc.c     ****     /**Common config 
  88:Src/adc.c     ****     */
  89:Src/adc.c     ****   hadc2.Instance = ADC2;
 121              		.loc 1 89 0
 122 0004 1248     		ldr	r0, .L11
 123 0006 134B     		ldr	r3, .L11+4
 124 0008 0360     		str	r3, [r0]
  90:Src/adc.c     ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 125              		.loc 1 90 0
 126 000a 0023     		movs	r3, #0
 127 000c 8360     		str	r3, [r0, #8]
  91:Src/adc.c     ****   hadc2.Init.ContinuousConvMode = DISABLE;
 128              		.loc 1 91 0
 129 000e C360     		str	r3, [r0, #12]
  92:Src/adc.c     ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 130              		.loc 1 92 0
 131 0010 4361     		str	r3, [r0, #20]
  93:Src/adc.c     ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 132              		.loc 1 93 0
 133 0012 4FF46022 		mov	r2, #917504
 134 0016 C261     		str	r2, [r0, #28]
  94:Src/adc.c     ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 135              		.loc 1 94 0
 136 0018 4360     		str	r3, [r0, #4]
  95:Src/adc.c     ****   hadc2.Init.NbrOfConversion = 1;
ARM GAS  /tmp/cc0nmd71.s 			page 5


 137              		.loc 1 95 0
 138 001a 0123     		movs	r3, #1
 139 001c 0361     		str	r3, [r0, #16]
  96:Src/adc.c     ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 140              		.loc 1 96 0
 141 001e FFF7FEFF 		bl	HAL_ADC_Init
 142              	.LVL4:
 143 0022 18B1     		cbz	r0, .L8
  97:Src/adc.c     ****   {
  98:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 144              		.loc 1 98 0
 145 0024 0C48     		ldr	r0, .L11+8
 146 0026 6221     		movs	r1, #98
 147 0028 FFF7FEFF 		bl	_Error_Handler
 148              	.LVL5:
 149              	.L8:
  99:Src/adc.c     ****   }
 100:Src/adc.c     **** 
 101:Src/adc.c     ****     /**Configure Regular Channel 
 102:Src/adc.c     ****     */
 103:Src/adc.c     ****   sConfig.Channel = ADC_CHANNEL_1;
 150              		.loc 1 103 0
 151 002c 0123     		movs	r3, #1
 152 002e 0193     		str	r3, [sp, #4]
 104:Src/adc.c     ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 153              		.loc 1 104 0
 154 0030 0293     		str	r3, [sp, #8]
 105:Src/adc.c     ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 155              		.loc 1 105 0
 156 0032 0023     		movs	r3, #0
 157 0034 0393     		str	r3, [sp, #12]
 106:Src/adc.c     ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 158              		.loc 1 106 0
 159 0036 0648     		ldr	r0, .L11
 160 0038 01A9     		add	r1, sp, #4
 161 003a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 162              	.LVL6:
 163 003e 18B1     		cbz	r0, .L7
 107:Src/adc.c     ****   {
 108:Src/adc.c     ****     _Error_Handler(__FILE__, __LINE__);
 164              		.loc 1 108 0
 165 0040 0548     		ldr	r0, .L11+8
 166 0042 6C21     		movs	r1, #108
 167 0044 FFF7FEFF 		bl	_Error_Handler
 168              	.LVL7:
 169              	.L7:
 109:Src/adc.c     ****   }
 110:Src/adc.c     **** 
 111:Src/adc.c     **** }
 170              		.loc 1 111 0
 171 0048 05B0     		add	sp, sp, #20
 172              	.LCFI5:
 173              		.cfi_def_cfa_offset 4
 174              		@ sp needed
 175 004a 5DF804FB 		ldr	pc, [sp], #4
 176              	.L12:
 177 004e 00BF     		.align	2
ARM GAS  /tmp/cc0nmd71.s 			page 6


 178              	.L11:
 179 0050 00000000 		.word	hadc2
 180 0054 00280140 		.word	1073817600
 181 0058 00000000 		.word	.LC0
 182              		.cfi_endproc
 183              	.LFE64:
 185              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 186              		.align	2
 187              		.global	HAL_ADC_MspInit
 188              		.thumb
 189              		.thumb_func
 191              	HAL_ADC_MspInit:
 192              	.LFB65:
 112:Src/adc.c     **** 
 113:Src/adc.c     **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
 114:Src/adc.c     **** {
 193              		.loc 1 114 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 24
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL8:
 198 0000 00B5     		push	{lr}
 199              	.LCFI6:
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 14, -4
 202 0002 87B0     		sub	sp, sp, #28
 203              	.LCFI7:
 204              		.cfi_def_cfa_offset 32
 115:Src/adc.c     **** 
 116:Src/adc.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 117:Src/adc.c     ****   if(adcHandle->Instance==ADC1)
 205              		.loc 1 117 0
 206 0004 0368     		ldr	r3, [r0]
 207 0006 174A     		ldr	r2, .L17
 208 0008 9342     		cmp	r3, r2
 209 000a 12D1     		bne	.L14
 210              	.LBB2:
 118:Src/adc.c     ****   {
 119:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspInit 0 */
 120:Src/adc.c     **** 
 121:Src/adc.c     ****   /* USER CODE END ADC1_MspInit 0 */
 122:Src/adc.c     ****     /* ADC1 clock enable */
 123:Src/adc.c     ****     __HAL_RCC_ADC1_CLK_ENABLE();
 211              		.loc 1 123 0
 212 000c 164B     		ldr	r3, .L17+4
 213 000e 9A69     		ldr	r2, [r3, #24]
 214 0010 42F40072 		orr	r2, r2, #512
 215 0014 9A61     		str	r2, [r3, #24]
 216 0016 9B69     		ldr	r3, [r3, #24]
 217 0018 03F40073 		and	r3, r3, #512
 218 001c 0093     		str	r3, [sp]
 219 001e 009B     		ldr	r3, [sp]
 220              	.LBE2:
 124:Src/adc.c     ****   
 125:Src/adc.c     ****     /**ADC1 GPIO Configuration    
 126:Src/adc.c     ****     PA0-WKUP     ------> ADC1_IN0 
 127:Src/adc.c     ****     */
ARM GAS  /tmp/cc0nmd71.s 			page 7


 128:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_0;
 221              		.loc 1 128 0
 222 0020 0123     		movs	r3, #1
 223 0022 0293     		str	r3, [sp, #8]
 129:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 224              		.loc 1 129 0
 225 0024 0323     		movs	r3, #3
 226 0026 0393     		str	r3, [sp, #12]
 130:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 227              		.loc 1 130 0
 228 0028 1048     		ldr	r0, .L17+8
 229              	.LVL9:
 230 002a 02A9     		add	r1, sp, #8
 231 002c FFF7FEFF 		bl	HAL_GPIO_Init
 232              	.LVL10:
 233 0030 14E0     		b	.L13
 234              	.LVL11:
 235              	.L14:
 131:Src/adc.c     **** 
 132:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 133:Src/adc.c     **** 
 134:Src/adc.c     ****   /* USER CODE END ADC1_MspInit 1 */
 135:Src/adc.c     ****   }
 136:Src/adc.c     ****   else if(adcHandle->Instance==ADC2)
 236              		.loc 1 136 0
 237 0032 0F4A     		ldr	r2, .L17+12
 238 0034 9342     		cmp	r3, r2
 239 0036 11D1     		bne	.L13
 240              	.LBB3:
 137:Src/adc.c     ****   {
 138:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 0 */
 139:Src/adc.c     **** 
 140:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 0 */
 141:Src/adc.c     ****     /* ADC2 clock enable */
 142:Src/adc.c     ****     __HAL_RCC_ADC2_CLK_ENABLE();
 241              		.loc 1 142 0
 242 0038 0B4B     		ldr	r3, .L17+4
 243 003a 9A69     		ldr	r2, [r3, #24]
 244 003c 42F48062 		orr	r2, r2, #1024
 245 0040 9A61     		str	r2, [r3, #24]
 246 0042 9B69     		ldr	r3, [r3, #24]
 247 0044 03F48063 		and	r3, r3, #1024
 248 0048 0193     		str	r3, [sp, #4]
 249 004a 019B     		ldr	r3, [sp, #4]
 250              	.LBE3:
 143:Src/adc.c     ****   
 144:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 145:Src/adc.c     ****     PA1     ------> ADC2_IN1 
 146:Src/adc.c     ****     */
 147:Src/adc.c     ****     GPIO_InitStruct.Pin = GPIO_PIN_1;
 251              		.loc 1 147 0
 252 004c 0223     		movs	r3, #2
 253 004e 0293     		str	r3, [sp, #8]
 148:Src/adc.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 254              		.loc 1 148 0
 255 0050 0323     		movs	r3, #3
 256 0052 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cc0nmd71.s 			page 8


 149:Src/adc.c     ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 257              		.loc 1 149 0
 258 0054 0548     		ldr	r0, .L17+8
 259              	.LVL12:
 260 0056 02A9     		add	r1, sp, #8
 261 0058 FFF7FEFF 		bl	HAL_GPIO_Init
 262              	.LVL13:
 263              	.L13:
 150:Src/adc.c     **** 
 151:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspInit 1 */
 152:Src/adc.c     **** 
 153:Src/adc.c     ****   /* USER CODE END ADC2_MspInit 1 */
 154:Src/adc.c     ****   }
 155:Src/adc.c     **** }
 264              		.loc 1 155 0
 265 005c 07B0     		add	sp, sp, #28
 266              	.LCFI8:
 267              		.cfi_def_cfa_offset 4
 268              		@ sp needed
 269 005e 5DF804FB 		ldr	pc, [sp], #4
 270              	.L18:
 271 0062 00BF     		.align	2
 272              	.L17:
 273 0064 00240140 		.word	1073816576
 274 0068 00100240 		.word	1073876992
 275 006c 00080140 		.word	1073809408
 276 0070 00280140 		.word	1073817600
 277              		.cfi_endproc
 278              	.LFE65:
 280              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 281              		.align	2
 282              		.global	HAL_ADC_MspDeInit
 283              		.thumb
 284              		.thumb_func
 286              	HAL_ADC_MspDeInit:
 287              	.LFB66:
 156:Src/adc.c     **** 
 157:Src/adc.c     **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 158:Src/adc.c     **** {
 288              		.loc 1 158 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              	.LVL14:
 293 0000 08B5     		push	{r3, lr}
 294              	.LCFI9:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 3, -8
 297              		.cfi_offset 14, -4
 159:Src/adc.c     **** 
 160:Src/adc.c     ****   if(adcHandle->Instance==ADC1)
 298              		.loc 1 160 0
 299 0002 0368     		ldr	r3, [r0]
 300 0004 0D4A     		ldr	r2, .L23
 301 0006 9342     		cmp	r3, r2
 302 0008 0AD1     		bne	.L20
 161:Src/adc.c     ****   {
ARM GAS  /tmp/cc0nmd71.s 			page 9


 162:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 163:Src/adc.c     **** 
 164:Src/adc.c     ****   /* USER CODE END ADC1_MspDeInit 0 */
 165:Src/adc.c     ****     /* Peripheral clock disable */
 166:Src/adc.c     ****     __HAL_RCC_ADC1_CLK_DISABLE();
 303              		.loc 1 166 0
 304 000a 02F56C42 		add	r2, r2, #60416
 305 000e 9369     		ldr	r3, [r2, #24]
 306 0010 23F40073 		bic	r3, r3, #512
 307 0014 9361     		str	r3, [r2, #24]
 167:Src/adc.c     ****   
 168:Src/adc.c     ****     /**ADC1 GPIO Configuration    
 169:Src/adc.c     ****     PA0-WKUP     ------> ADC1_IN0 
 170:Src/adc.c     ****     */
 171:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 308              		.loc 1 171 0
 309 0016 0A48     		ldr	r0, .L23+4
 310              	.LVL15:
 311 0018 0121     		movs	r1, #1
 312 001a FFF7FEFF 		bl	HAL_GPIO_DeInit
 313              	.LVL16:
 314 001e 08BD     		pop	{r3, pc}
 315              	.LVL17:
 316              	.L20:
 172:Src/adc.c     **** 
 173:Src/adc.c     ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 174:Src/adc.c     **** 
 175:Src/adc.c     ****   /* USER CODE END ADC1_MspDeInit 1 */
 176:Src/adc.c     ****   }
 177:Src/adc.c     ****   else if(adcHandle->Instance==ADC2)
 317              		.loc 1 177 0
 318 0020 084A     		ldr	r2, .L23+8
 319 0022 9342     		cmp	r3, r2
 320 0024 09D1     		bne	.L19
 178:Src/adc.c     ****   {
 179:Src/adc.c     ****   /* USER CODE BEGIN ADC2_MspDeInit 0 */
 180:Src/adc.c     **** 
 181:Src/adc.c     ****   /* USER CODE END ADC2_MspDeInit 0 */
 182:Src/adc.c     ****     /* Peripheral clock disable */
 183:Src/adc.c     ****     __HAL_RCC_ADC2_CLK_DISABLE();
 321              		.loc 1 183 0
 322 0026 02F56842 		add	r2, r2, #59392
 323 002a 9369     		ldr	r3, [r2, #24]
 324 002c 23F48063 		bic	r3, r3, #1024
 325 0030 9361     		str	r3, [r2, #24]
 184:Src/adc.c     ****   
 185:Src/adc.c     ****     /**ADC2 GPIO Configuration    
 186:Src/adc.c     ****     PA1     ------> ADC2_IN1 
 187:Src/adc.c     ****     */
 188:Src/adc.c     ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 326              		.loc 1 188 0
 327 0032 0348     		ldr	r0, .L23+4
 328              	.LVL18:
 329 0034 0221     		movs	r1, #2
 330 0036 FFF7FEFF 		bl	HAL_GPIO_DeInit
 331              	.LVL19:
 332              	.L19:
ARM GAS  /tmp/cc0nmd71.s 			page 10


 333 003a 08BD     		pop	{r3, pc}
 334              	.L24:
 335              		.align	2
 336              	.L23:
 337 003c 00240140 		.word	1073816576
 338 0040 00080140 		.word	1073809408
 339 0044 00280140 		.word	1073817600
 340              		.cfi_endproc
 341              	.LFE66:
 343              		.comm	hadc2,48,4
 344              		.comm	hadc1,48,4
 345              		.section	.rodata.str1.4,"aMS",%progbits,1
 346              		.align	2
 347              	.LC0:
 348 0000 5372632F 		.ascii	"Src/adc.c\000"
 348      6164632E 
 348      6300
 349              		.text
 350              	.Letext0:
 351              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 352              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 353              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 354              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 355              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 356              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 357              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 358              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 359              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 360              		.file 11 "Inc/adc.h"
ARM GAS  /tmp/cc0nmd71.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/cc0nmd71.s:19     .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc0nmd71.s:24     .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc0nmd71.s:96     .text.MX_ADC1_Init:0000000000000050 $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc0nmd71.s:103    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/cc0nmd71.s:108    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/cc0nmd71.s:179    .text.MX_ADC2_Init:0000000000000050 $d
                            *COM*:0000000000000030 hadc2
     /tmp/cc0nmd71.s:186    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cc0nmd71.s:191    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cc0nmd71.s:273    .text.HAL_ADC_MspInit:0000000000000064 $d
     /tmp/cc0nmd71.s:281    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cc0nmd71.s:286    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cc0nmd71.s:337    .text.HAL_ADC_MspDeInit:000000000000003c $d
     /tmp/cc0nmd71.s:346    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_ADC_Init
_Error_Handler
HAL_ADC_ConfigChannel
HAL_GPIO_Init
HAL_GPIO_DeInit
